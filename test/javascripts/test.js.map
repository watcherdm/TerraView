{"version":3,"file":"public/test/javascripts/test.js","sources":["test/initialize.coffee","test/models/heightmap.coffee","test/models/heightmapChunk.coffee","test/models/tile.coffee","test/models/viewport.coffee","test/utils.coffee","test/views/stage.coffee","test/views/tile.coffee","test/views/tileMap.coffee","test/views/viewport.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA","sourcesContent":["tests = [\n  \"./utils\"\n  \"./models/heightmapChunk\"\n  \"./models/heightmap\"\n  \"./models/tile\"\n  \"./models/viewport\"\n  \"./views/tile\"\n  \"./views/tileMap\"\n  \"./views/viewport\"\n  \"./views/stage\"\n]\n\nfor test in tests\n  require test\n","HeightmapModel = require \"models/Heightmap\"\n\ndescribe \"Model Heightmap\", ->\n  beforeEach ->\n    seed = 19870910\n    worldChunkWidth = 3\n    worldChunkHeight = 3\n    chunkWidth = 4\n    chunkHeight = 3\n    maxElevation = 5\n\n    @heightmapModel = HeightmapModel.create seed, worldChunkWidth, worldChunkHeight, chunkWidth, chunkHeight, maxElevation\n\n  afterEach ->\n    @heightmapModel.dispose()\n\n    expect(HeightmapModel.getUsedLength()).to.equal 0\n\n  it \"should know world tile dimensions\", ->\n    expect(@heightmapModel.worldTileWidth).to.equal 12\n    expect(@heightmapModel.worldTileHeight).to.equal 9\n\n  it \"should build chunks and stitch them together\", ->\n    expect(@heightmapModel.chunks[0][0].cells[0][0]).to.equal 0\n    expect(@heightmapModel.chunks[0][0].cells[2][0]).to.equal 3\n    expect(@heightmapModel.chunks[0][0].cells[2][3]).to.equal 4\n    expect(@heightmapModel.chunks[0][0].cells[0][3]).to.equal 2\n\n    expect(@heightmapModel.chunks[0][1].cells[0][0]).to.equal 2\n    expect(@heightmapModel.chunks[0][1].cells[2][0]).to.equal 3\n    expect(@heightmapModel.chunks[0][1].cells[2][3]).to.equal 1\n    expect(@heightmapModel.chunks[0][1].cells[0][3]).to.equal 4\n\n    expect(@heightmapModel.chunks[1][0].cells[0][0]).to.equal 3\n    expect(@heightmapModel.chunks[1][0].cells[2][0]).to.equal 3\n    expect(@heightmapModel.chunks[1][0].cells[2][3]).to.equal 2\n    expect(@heightmapModel.chunks[1][0].cells[0][3]).to.equal 4\n\n    expect(@heightmapModel.chunks[1][1].cells[0][0]).to.equal 4\n    expect(@heightmapModel.chunks[1][1].cells[2][0]).to.equal 3\n    expect(@heightmapModel.chunks[1][1].cells[2][3]).to.equal 0\n    expect(@heightmapModel.chunks[1][1].cells[0][3]).to.equal 1\n\n  it \"should generate a heightmap\", ->\n    expect(@heightmapModel.heightmap[0][0]).to.equal 0\n    expect(@heightmapModel.heightmap[5][0]).to.equal 1\n    expect(@heightmapModel.heightmap[5][7]).to.equal 0\n    expect(@heightmapModel.heightmap[0][7]).to.equal 1\n\n  it \"should process tiles to spritesheet indicies\", ->\n    expect(@heightmapModel.data[0][0]).to.equal 0\n    expect(@heightmapModel.data[5][0]).to.equal 221\n    expect(@heightmapModel.data[5][7]).to.equal 0\n    expect(@heightmapModel.data[0][7]).to.equal 255\n\n  it \"should get an area\", ->\n    area = @heightmapModel.getArea 10, 10, 0, 0\n\n    expect(area.length).to.equal 10\n    expect(area[0].length).to.equal 10\n\n    expect(area[0][0]).to.equal 0\n    expect(area[9][0]).to.equal 0\n    expect(area[9][9]).to.equal 249\n    expect(area[0][9]).to.equal 249\n","HeightmapChunkModel = require \"models/HeightmapChunk\"\n\ndescribe \"Model HeightmapChunk\", ->\n  beforeEach ->\n    @heightmapChunkModel = HeightmapChunkModel.create()\n\n  afterEach ->\n    @heightmapChunkModel.dispose()\n\n    expect(HeightmapChunkModel.getUsedLength()).to.equal 0\n\n  it \"should have cells\", ->\n    expect(@heightmapChunkModel.cells).to.not.equal undefined\n\n  it \"should do populate it's cells correctly\", ->\n    @heightmapChunkModel.dispose()\n\n    @heightmapChunkModel = HeightmapChunkModel.create 0, 4, 0, 4, 5, 5\n\n    map = [\n      [ 0, 1, 2, 3, 4]\n      [ 1, 1, 2, 2, 3]\n      [ 2, 2, 2, 2, 2]\n      [ 3, 2, 2, 1, 1]\n      [ 4, 3, 2, 1, 0]\n    ]\n\n    expect(@heightmapChunkModel.cells).to.deep.equal map\n","TileModel = require \"models/Tile\"\n\ndescribe \"Model Tile\", ->\n  beforeEach ->\n    @tileModel = TileModel.create 1, 2, 3\n\n  afterEach ->\n    @tileModel.dispose()\n\n    expect(TileModel.getUsedLength()).to.equal 0\n\n  it \"should be valid\", ->\n    expect(@tileModel.index).to.equal 1\n    expect(@tileModel.x).to.equal 2\n    expect(@tileModel.y).to.equal 3\n\n  it \"should set index\", ->\n    expect(@tileModel.index).to.equal 1\n\n    @tileModel.setIndex 5\n\n    expect(@tileModel.index).to.equal 5\n\n  it \"should fire a callback when index has changed\", ->\n    eventCalled = false\n\n    eventCallback = ->\n      eventCalled = true\n\n    @tileModel.setIndexCallback eventCallback\n\n    @tileModel.setIndex 5\n\n    expect(eventCalled).to.equal true\n","ViewportModel = require \"models/Viewport\"\n\ndescribe \"Model Viewport\", ->\n  beforeEach ->\n    @viewportModel = ViewportModel.create 1, 2, 3, 4, 5, 6, 7, 8, 9\n\n  afterEach ->\n    @viewportModel.dispose()\n\n    expect(ViewportModel.getUsedLength()).to.equal 0\n\n  it \"should have valid properties\", ->\n    expect(@viewportModel.x).to.equal 1\n    expect(@viewportModel.y).to.equal 2\n    expect(@viewportModel.width).to.equal 3\n    expect(@viewportModel.height).to.equal 4\n    expect(@viewportModel.worldChunkWidth).to.equal 5\n    expect(@viewportModel.worldChunkHeight).to.equal 6\n    expect(@viewportModel.chunkWidth).to.equal 7\n    expect(@viewportModel.chunkHeight).to.equal 8\n    expect(@viewportModel.maxElevation).to.equal 9\n\n  it \"should compute world tile size\", ->\n    expect(@viewportModel.worldTileWidth).to.equal 35\n    expect(@viewportModel.worldTileHeight).to.equal 48\n\n  it \"should set x/y\", ->\n    expect(@viewportModel.x).to.equal 1\n    expect(@viewportModel.y).to.equal 2\n\n    @viewportModel.setX 3\n    @viewportModel.setY 5\n\n    expect(@viewportModel.x).to.equal 3\n    expect(@viewportModel.y).to.equal 5\n\n  it \"should fire an event when x/y change\", ->\n    eventCalled = false\n\n    eventCallback = ->\n      eventCalled = true\n\n    EventBus.addEventListener \"!viewport:move\", eventCallback, @\n\n    @viewportModel.setX 4\n\n    expect(eventCalled).to.equal true\n\n    EventBus.removeEventListener eventCallback, @\n","utils = require \"lib/utils\"\n\ndescribe \"Lib Utils\", ->\n  it \"should clamp\", ->\n    expect(utils.clamp 10, 20).to.equal 10\n    expect(utils.clamp 21, 20).to.equal 1\n    expect(utils.clamp -10, 20).to.equal 10\n\n  it \"should random\", ->\n    expect(utils.random 20).to.equal 0.9575093308120967\n\n  it \"should tileHeightToType\", ->\n    expect(utils.tileHeightToType 4, 10).to.equal 0\n    expect(utils.tileHeightToType 6, 10).to.equal 1\n","StageView = require \"views/Stage\"\nViewportView = require \"views/Viewport\"\nViewportModel = require \"models/Viewport\"\nTileView = require \"views/Tile\"\n\ndescribe \"View Stage\", ->\n  beforeEach ->\n    @stageView = StageView.create \"\"\n\n  afterEach ->\n    @stageView.dispose()\n\n    expect(StageView.getUsedLength()).to.equal 0\n    expect(ViewportView.getUsedLength()).to.equal 0\n    expect(ViewportModel.getUsedLength()).to.equal 0\n    expect(TileView.getUsedLength()).to.equal 0\n\n  it \"should use require animation frame\", ->\n    expect(createjs.Ticker.useRAF).to.equal true\n\n  it \"should have a viewport view\", ->\n    expect(@stageView.el.children.length).to.equal 1\n","TileView = require \"views/Tile\"\nTileModel = require \"models/Tile\"\n\ndescribe \"View Tile\", ->\n  beforeEach ->\n    @tileModel = TileModel.create 1, 2, 3\n    @tileView = TileView.create @tileModel\n\n  afterEach ->\n    @tileView.dispose()\n    @tileModel.dispose()\n\n    expect(TileView.getUsedLength()).to.equal 0\n    expect(TileModel.getUsedLength()).to.equal 0\n\n  it \"should have an el\", ->\n    expect(@tileView.el).to.not.equal undefined\n\n  it \"should set sprite sheet position\", ->\n    expect(@tileView.el.sourceRect.x).to.equal 16\n    expect(@tileView.el.sourceRect.y).to.equal 0\n\n  it \"should set sprite position when model index changes\", ->\n    expect(@tileView.el.sourceRect.x).to.equal 16\n    expect(@tileView.el.sourceRect.y).to.equal 0\n\n    @tileModel.setIndex 3\n\n    expect(@tileView.el.sourceRect.x).to.equal 48\n    expect(@tileView.el.sourceRect.y).to.equal 0\n","TileMapView = require \"views/TileMap\"\nHeightmapModel = require \"models/Heightmap\"\nViewportModel = require \"models/Viewport\"\nTileModel = require \"models/Tile\"\nTileView = require \"views/Tile\"\nutils = require \"lib/utils\"\n\ndescribe \"View TileMap\", ->\n  beforeEach ->\n    utils.seed = 19870910\n\n    @viewportModel = ViewportModel.create 1, 2, 5, 6, 5, 6, 7, 8, 9\n    @tileMapView = TileMapView.create @viewportModel\n\n  afterEach ->\n    @viewportModel.dispose()\n    @tileMapView.dispose()\n\n    expect(TileMapView.getUsedLength()).to.equal 0\n    expect(HeightmapModel.getUsedLength()).to.equal 0\n    expect(ViewportModel.getUsedLength()).to.equal 0\n    expect(TileModel.getUsedLength()).to.equal 0\n    expect(TileView.getUsedLength()).to.equal 0\n\n  it \"should have an el\", ->\n    expect(@tileMapView.el).to.not.equal undefined\n\n  it \"should have a heightmap\", ->\n    expect(@tileMapView.heightmap).to.not.equal undefined\n\n  it \"should have a viewport model\", ->\n    expect(@tileMapView.heightmap).to.not.equal undefined\n\n  it \"should populate tile model collection\", ->\n    expect(@tileMapView.tileModels.length).to.equal 30\n\n  it \"should add tile views to container\", ->\n    expect(@tileMapView.el.children.length).to.equal 30\n\n  it \"should redraw when key down event is fired by viewport\", ->\n    tileModels = @tileMapView.tileModels\n\n    expect(tileModels[0].index).to.equal 185\n\n    @viewportModel.setX 12\n\n    expect(tileModels[0].index).to.equal 255\n","ViewportView = require \"views/Viewport\"\nViewportModel = require \"models/Viewport\"\nTileMapView = require \"views/TileMap\"\n\ndescribe \"View Viewport\", ->\n  beforeEach ->\n    @viewportModel = ViewportModel.create 1, 2, 3, 4, 5, 6, 7, 8, 9\n    @viewportView = ViewportView.create @viewportModel\n\n  afterEach ->\n    @viewportView.dispose()\n    @viewportModel.dispose()\n\n    expect(ViewportView.getUsedLength()).to.equal 0\n    expect(ViewportModel.getUsedLength()).to.equal 0\n    expect(TileMapView.getUsedLength()).to.equal 0\n\n  it \"should have a model\", ->\n    expect(@viewportView.model).to.not.equal undefined\n\n  it \"should have an el\", ->\n    expect(@viewportView.el).to.not.equal undefined\n\n  it \"should add a tilemap view as child\", ->\n    expect(@viewportView.el.children.length).to.equal 1\n\n  it \"should update viewport model with movement\", ->\n    expect(@viewportModel.x).to.equal 1\n    expect(@viewportModel.y).to.equal 2\n\n    EventBus.dispatch \"!key:down\", {}, { keyCode: 37 }\n\n    expect(@viewportModel.x).to.equal 0\n    expect(@viewportModel.y).to.equal 2\n"]}